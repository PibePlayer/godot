#!/usr/bin/env python

Import("env")

thirdparty_obj = []

# DirectX Headers (must take precedence over Windows SDK's)

env.Prepend(CPPPATH=["#thirdparty/directx_headers"])

# Direct3D 12 Memory Allocator

env.Append(CPPPATH=["#thirdparty/d3d12ma"])

thirdparty_sources_d3d12ma = ["#thirdparty/d3d12ma/D3D12MemAlloc.cpp"]

env_thirdparty_d3d12ma = env.Clone()
env_thirdparty_d3d12ma.add_source_files(thirdparty_obj, thirdparty_sources_d3d12ma)
env_thirdparty_d3d12ma.Append(CCFLAGS=["/std:c++14", "/permissive-"])

if env["vsproj"]:
    env.vs_srcs += ["#thirdparty/d3d12ma/D3D12MemAlloc.natvis"]

# SPIRV-Cross

spirv_cross_dir = "#thirdparty/spirv-cross/"

env.Append(CPPPATH=[spirv_cross_dir])

env_thirdparty_spirv_cross = env.Clone()

spirv_sources = [
    "spirv_cross.cpp",
    "spirv_parser.cpp",
    "spirv_cross_parsed_ir.cpp",
    "spirv_cfg.cpp",
    "spirv_glsl.cpp",
    "spirv_hlsl.cpp",
]
env_thirdparty_spirv_cross.add_source_files(thirdparty_obj, [spirv_cross_dir + v for v in spirv_sources])

env_thirdparty_spirv_cross.Append(CPPDEFINES=["SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS"])
if not env.msvc:
    env_thirdparty_spirv_cross.Append(CXXFLAGS=["-fno-exceptions"])
    env_thirdparty_spirv_cross.Append(CCFLAGS=["-std=cpp++11"])
else:
    env_thirdparty_spirv_cross.Append(CCFLAGS=["/std:c++14"])  # C++11 not available in MSVC


# DirectX Shader Compiler

# For now, we need to parse and re-write bitcode, and pack/unpack DXIL containers, so we need these components: BitReader, BitWriter, DxilContainer.
#
# Copied the whole include/ and lib/ directories and commented out entire sub-paths.
#
# Special cases:
# - DataTypes.h - Generated by copying DataTypes.h.cmake and tweaking the cases of #cmakedefine into instances of plain #define.
# - llvm-config.h - Generated by copying llvm-config.h.cmake and tweaking a lot of directives. This is an art. Please, use the current one as a reference. DON'T FORGET TO UPGRADE LLVM VERSION!
# - config.h - Generated by copying config.h.in and doing some tweaks as well, taking inspiration from a real build. Admittedly, both config headers files are a bit messy, but just work.
# - AsmParsers.def, AsmPrinters.def, Disassemblers.def, Targets.def - Generated each by copying its counterpart .in file and commented out the @@ directive.
# - HLSLOptions.inc, Intrinsics.gen - Obtained from a local build of DXC.
#
# NOTE:
# Considering we're already building a big chunk of DXC with Godot, we may just as well include a few more files
# so Godot can contain both the compiler and the validator and the need to include pre-built libraries vanishes.
# But, our hope is that in the future we can replace the bundled DXC source with small libraries which provide the functionality
# we are taking from DXC (like the promising work on Microsoft provided code to Mesa, via NIR, which would also remove the need for SPIRV-Cross).

dxc_dir = "#thirdparty/dxc/"

env.Append(CPPPATH=[dxc_dir + "include"])

env_thirdparty_dxc = env.Clone()

dxc_sources = [
    "lib/Analysis/AliasAnalysis.cpp",
    "lib/Analysis/AliasAnalysisCounter.cpp",
    "lib/Analysis/AliasAnalysisEvaluator.cpp",
    "lib/Analysis/AliasDebugger.cpp",
    "lib/Analysis/AliasSetTracker.cpp",
    "lib/Analysis/Analysis.cpp",
    "lib/Analysis/AssumptionCache.cpp",
    "lib/Analysis/BasicAliasAnalysis.cpp",
    "lib/Analysis/BlockFrequencyInfo.cpp",
    "lib/Analysis/BlockFrequencyInfoImpl.cpp",
    "lib/Analysis/BranchProbabilityInfo.cpp",
    "lib/Analysis/CFG.cpp",
    "lib/Analysis/CFGPrinter.cpp",
    "lib/Analysis/CFLAliasAnalysis.cpp",
    "lib/Analysis/CGSCCPassManager.cpp",
    "lib/Analysis/CaptureTracking.cpp",
    "lib/Analysis/CodeMetrics.cpp",
    "lib/Analysis/ConstantFolding.cpp",
    "lib/Analysis/CostModel.cpp",
    "lib/Analysis/Delinearization.cpp",
    "lib/Analysis/DependenceAnalysis.cpp",
    "lib/Analysis/DivergenceAnalysis.cpp",
    "lib/Analysis/DomPrinter.cpp",
    "lib/Analysis/DominanceFrontier.cpp",
    "lib/Analysis/DxilConstantFolding.cpp",
    "lib/Analysis/DxilConstantFoldingExt.cpp",
    "lib/Analysis/DxilSimplify.cpp",
    "lib/Analysis/DxilValueCache.cpp",
    "lib/Analysis/IPA/CallGraph.cpp",
    "lib/Analysis/IPA/CallGraphSCCPass.cpp",
    "lib/Analysis/IPA/CallPrinter.cpp",
    "lib/Analysis/IPA/GlobalsModRef.cpp",
    "lib/Analysis/IPA/IPA.cpp",
    "lib/Analysis/IPA/InlineCost.cpp",
    "lib/Analysis/IVUsers.cpp",
    "lib/Analysis/InstCount.cpp",
    "lib/Analysis/InstructionSimplify.cpp",
    "lib/Analysis/Interval.cpp",
    "lib/Analysis/IntervalPartition.cpp",
    "lib/Analysis/IteratedDominanceFrontier.cpp",
    "lib/Analysis/LazyCallGraph.cpp",
    "lib/Analysis/LazyValueInfo.cpp",
    "lib/Analysis/LibCallAliasAnalysis.cpp",
    "lib/Analysis/LibCallSemantics.cpp",
    "lib/Analysis/Lint.cpp",
    "lib/Analysis/Loads.cpp",
    "lib/Analysis/LoopAccessAnalysis.cpp",
    "lib/Analysis/LoopInfo.cpp",
    "lib/Analysis/LoopPass.cpp",
    "lib/Analysis/MemDepPrinter.cpp",
    "lib/Analysis/MemDerefPrinter.cpp",
    "lib/Analysis/MemoryBuiltins.cpp",
    "lib/Analysis/MemoryDependenceAnalysis.cpp",
    "lib/Analysis/MemoryLocation.cpp",
    "lib/Analysis/ModuleDebugInfoPrinter.cpp",
    "lib/Analysis/NoAliasAnalysis.cpp",
    "lib/Analysis/PHITransAddr.cpp",
    "lib/Analysis/PostDominators.cpp",
    "lib/Analysis/PtrUseVisitor.cpp",
    "lib/Analysis/ReducibilityAnalysis.cpp",
    "lib/Analysis/RegionPass.cpp",
    "lib/Analysis/ScalarEvolution.cpp",
    "lib/Analysis/ScalarEvolutionAliasAnalysis.cpp",
    "lib/Analysis/ScalarEvolutionExpander.cpp",
    "lib/Analysis/ScalarEvolutionNormalization.cpp",
    "lib/Analysis/ScopedNoAliasAA.cpp",
    "lib/Analysis/SparsePropagation.cpp",
    "lib/Analysis/TargetLibraryInfo.cpp",
    "lib/Analysis/TargetTransformInfo.cpp",
    "lib/Analysis/Trace.cpp",
    "lib/Analysis/TypeBasedAliasAnalysis.cpp",
    "lib/Analysis/ValueTracking.cpp",
    "lib/Analysis/VectorUtils.cpp",
    "lib/Analysis/VectorUtils2.cpp",
    "lib/Analysis/regioninfo.cpp",
    "lib/Analysis/regionprinter.cpp",
    "lib/AsmParser/LLLexer.cpp",
    "lib/AsmParser/LLParser.cpp",
    "lib/AsmParser/Parser.cpp",
    "lib/Bitcode/Reader/BitReader.cpp",
    "lib/Bitcode/Reader/BitcodeReader.cpp",
    "lib/Bitcode/Reader/BitstreamReader.cpp",
    "lib/Bitcode/Writer/BitWriter.cpp",
    "lib/Bitcode/Writer/BitcodeWriter.cpp",
    "lib/Bitcode/Writer/BitcodeWriterPass.cpp",
    "lib/Bitcode/Writer/ValueEnumerator.cpp",
    # "lib/CodeGen/AggressiveAntiDepBreaker.cpp",
    # "lib/CodeGen/AllocationOrder.cpp",
    # "lib/CodeGen/Analysis.cpp",
    # "lib/CodeGen/AsmPrinter/ARMException.cpp",
    # "lib/CodeGen/AsmPrinter/AddressPool.cpp",
    # "lib/CodeGen/AsmPrinter/AsmPrinter.cpp",
    # "lib/CodeGen/AsmPrinter/AsmPrinterDwarf.cpp",
    # "lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp",
    # "lib/CodeGen/AsmPrinter/DIE.cpp",
    # "lib/CodeGen/AsmPrinter/DIEHash.cpp",
    # "lib/CodeGen/AsmPrinter/DbgValueHistoryCalculator.cpp",
    # "lib/CodeGen/AsmPrinter/DebugLocStream.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfAccelTable.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfCFIException.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfDebug.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfExpression.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfFile.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfStringPool.cpp",
    # "lib/CodeGen/AsmPrinter/DwarfUnit.cpp",
    # "lib/CodeGen/AsmPrinter/EHStreamer.cpp",
    # "lib/CodeGen/AsmPrinter/ErlangGCPrinter.cpp",
    # "lib/CodeGen/AsmPrinter/OcamlGCPrinter.cpp",
    # "lib/CodeGen/AsmPrinter/WinCodeViewLineTables.cpp",
    # "lib/CodeGen/AsmPrinter/WinException.cpp",
    # "lib/CodeGen/AtomicExpandPass.cpp",
    # "lib/CodeGen/BasicTargetTransformInfo.cpp",
    # "lib/CodeGen/BranchFolding.cpp",
    # "lib/CodeGen/CalcSpillWeights.cpp",
    # "lib/CodeGen/CallingConvLower.cpp",
    # "lib/CodeGen/CodeGen.cpp",
    # "lib/CodeGen/CodeGenPrepare.cpp",
    # "lib/CodeGen/CoreCLRGC.cpp",
    # "lib/CodeGen/CriticalAntiDepBreaker.cpp",
    # "lib/CodeGen/DFAPacketizer.cpp",
    # "lib/CodeGen/DeadMachineInstructionElim.cpp",
    # "lib/CodeGen/DwarfEHPrepare.cpp",
    # "lib/CodeGen/EarlyIfConversion.cpp",
    # "lib/CodeGen/EdgeBundles.cpp",
    # "lib/CodeGen/ErlangGC.cpp",
    # "lib/CodeGen/ExecutionDepsFix.cpp",
    # "lib/CodeGen/ExpandISelPseudos.cpp",
    # "lib/CodeGen/ExpandPostRAPseudos.cpp",
    # "lib/CodeGen/FaultMaps.cpp",
    # "lib/CodeGen/GCMetadata.cpp",
    # "lib/CodeGen/GCMetadataPrinter.cpp",
    # "lib/CodeGen/GCRootLowering.cpp",
    # "lib/CodeGen/GCStrategy.cpp",
    # "lib/CodeGen/GlobalMerge.cpp",
    # "lib/CodeGen/IfConversion.cpp",
    # "lib/CodeGen/ImplicitNullChecks.cpp",
    # "lib/CodeGen/InlineSpiller.cpp",
    # "lib/CodeGen/InterferenceCache.cpp",
    # "lib/CodeGen/InterleavedAccessPass.cpp",
    # "lib/CodeGen/IntrinsicLowering.cpp",
    # "lib/CodeGen/LLVMTargetMachine.cpp",
    # "lib/CodeGen/LatencyPriorityQueue.cpp",
    # "lib/CodeGen/LexicalScopes.cpp",
    # "lib/CodeGen/LiveDebugVariables.cpp",
    # "lib/CodeGen/LiveInterval.cpp",
    # "lib/CodeGen/LiveIntervalAnalysis.cpp",
    # "lib/CodeGen/LiveIntervalUnion.cpp",
    # "lib/CodeGen/LivePhysRegs.cpp",
    # "lib/CodeGen/LiveRangeCalc.cpp",
    # "lib/CodeGen/LiveRangeEdit.cpp",
    # "lib/CodeGen/LiveRegMatrix.cpp",
    # "lib/CodeGen/LiveStackAnalysis.cpp",
    # "lib/CodeGen/LiveVariables.cpp",
    # "lib/CodeGen/LocalStackSlotAllocation.cpp",
    # "lib/CodeGen/MIRParser/MILexer.cpp",
    # "lib/CodeGen/MIRParser/MIParser.cpp",
    # "lib/CodeGen/MIRParser/MIRParser.cpp",
    # "lib/CodeGen/MIRPrinter.cpp",
    # "lib/CodeGen/MIRPrintingPass.cpp",
    # "lib/CodeGen/MachineBasicBlock.cpp",
    # "lib/CodeGen/MachineBlockFrequencyInfo.cpp",
    # "lib/CodeGen/MachineBlockPlacement.cpp",
    # "lib/CodeGen/MachineBranchProbabilityInfo.cpp",
    # "lib/CodeGen/MachineCSE.cpp",
    # "lib/CodeGen/MachineCombiner.cpp",
    # "lib/CodeGen/MachineCopyPropagation.cpp",
    # "lib/CodeGen/MachineDominanceFrontier.cpp",
    # "lib/CodeGen/MachineDominators.cpp",
    # "lib/CodeGen/MachineFunction.cpp",
    # "lib/CodeGen/MachineFunctionAnalysis.cpp",
    # "lib/CodeGen/MachineFunctionPass.cpp",
    # "lib/CodeGen/MachineFunctionPrinterPass.cpp",
    # "lib/CodeGen/MachineInstr.cpp",
    # "lib/CodeGen/MachineInstrBundle.cpp",
    # "lib/CodeGen/MachineLICM.cpp",
    # "lib/CodeGen/MachineLoopInfo.cpp",
    # "lib/CodeGen/MachineModuleInfo.cpp",
    # "lib/CodeGen/MachineModuleInfoImpls.cpp",
    # "lib/CodeGen/MachinePassRegistry.cpp",
    # "lib/CodeGen/MachinePostDominators.cpp",
    # "lib/CodeGen/MachineRegionInfo.cpp",
    # "lib/CodeGen/MachineRegisterInfo.cpp",
    # "lib/CodeGen/MachineSSAUpdater.cpp",
    # "lib/CodeGen/MachineScheduler.cpp",
    # "lib/CodeGen/MachineSink.cpp",
    # "lib/CodeGen/MachineTraceMetrics.cpp",
    # "lib/CodeGen/MachineVerifier.cpp",
    # "lib/CodeGen/OcamlGC.cpp",
    # "lib/CodeGen/OptimizePHIs.cpp",
    # "lib/CodeGen/PHIElimination.cpp",
    # "lib/CodeGen/PHIEliminationUtils.cpp",
    # "lib/CodeGen/Passes.cpp",
    # "lib/CodeGen/PeepholeOptimizer.cpp",
    # "lib/CodeGen/PostRASchedulerList.cpp",
    # "lib/CodeGen/ProcessImplicitDefs.cpp",
    # "lib/CodeGen/PrologEpilogInserter.cpp",
    # "lib/CodeGen/PseudoSourceValue.cpp",
    # "lib/CodeGen/RegAllocBase.cpp",
    # "lib/CodeGen/RegAllocBasic.cpp",
    # "lib/CodeGen/RegAllocFast.cpp",
    # "lib/CodeGen/RegAllocGreedy.cpp",
    # "lib/CodeGen/RegAllocPBQP.cpp",
    # "lib/CodeGen/RegisterClassInfo.cpp",
    # "lib/CodeGen/RegisterCoalescer.cpp",
    # "lib/CodeGen/RegisterPressure.cpp",
    # "lib/CodeGen/RegisterScavenging.cpp",
    # "lib/CodeGen/ScheduleDAG.cpp",
    # "lib/CodeGen/ScheduleDAGInstrs.cpp",
    # "lib/CodeGen/ScheduleDAGPrinter.cpp",
    # "lib/CodeGen/ScoreboardHazardRecognizer.cpp",
    # "lib/CodeGen/SelectionDAG/DAGCombiner.cpp",
    # "lib/CodeGen/SelectionDAG/FastISel.cpp",
    # "lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp",
    # "lib/CodeGen/SelectionDAG/InstrEmitter.cpp",
    # "lib/CodeGen/SelectionDAG/LegalizeDAG.cpp",
    # "lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp",
    # "lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp",
    # "lib/CodeGen/SelectionDAG/LegalizeTypes.cpp",
    # "lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp",
    # "lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp",
    # "lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp",
    # "lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp",
    # "lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp",
    # "lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp",
    # "lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp",
    # "lib/CodeGen/SelectionDAG/SelectionDAG.cpp",
    # "lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp",
    # "lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp",
    # "lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp",
    # "lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp",
    # "lib/CodeGen/SelectionDAG/StatepointLowering.cpp",
    # "lib/CodeGen/SelectionDAG/TargetLowering.cpp",
    # "lib/CodeGen/SelectionDAG/TargetSelectionDAGInfo.cpp",
    # "lib/CodeGen/SelectionDAG/legalizevectorops.cpp",
    # "lib/CodeGen/ShadowStackGC.cpp",
    # "lib/CodeGen/ShadowStackGCLowering.cpp",
    # "lib/CodeGen/ShrinkWrap.cpp",
    # "lib/CodeGen/SjLjEHPrepare.cpp",
    # "lib/CodeGen/SlotIndexes.cpp",
    # "lib/CodeGen/SpillPlacement.cpp",
    # "lib/CodeGen/SplitKit.cpp",
    # "lib/CodeGen/StackColoring.cpp",
    # "lib/CodeGen/StackMapLivenessAnalysis.cpp",
    # "lib/CodeGen/StackMaps.cpp",
    # "lib/CodeGen/StackProtector.cpp",
    # "lib/CodeGen/StackSlotColoring.cpp",
    # "lib/CodeGen/StatepointExampleGC.cpp",
    # "lib/CodeGen/TailDuplication.cpp",
    # "lib/CodeGen/TargetFrameLoweringImpl.cpp",
    # "lib/CodeGen/TargetInstrInfo.cpp",
    # "lib/CodeGen/TargetLoweringBase.cpp",
    # "lib/CodeGen/TargetLoweringObjectFileImpl.cpp",
    # "lib/CodeGen/TargetOptionsImpl.cpp",
    # "lib/CodeGen/TargetRegisterInfo.cpp",
    # "lib/CodeGen/TargetSchedule.cpp",
    # "lib/CodeGen/TwoAddressInstructionPass.cpp",
    # "lib/CodeGen/UnreachableBlockElim.cpp",
    # "lib/CodeGen/VirtRegMap.cpp",
    # "lib/CodeGen/WinEHPrepare.cpp",
    "lib/DXIL/DxilCBuffer.cpp",
    "lib/DXIL/DxilCompType.cpp",
    "lib/DXIL/DxilCounters.cpp",
    "lib/DXIL/DxilInterpolationMode.cpp",
    "lib/DXIL/DxilMetadataHelper.cpp",
    "lib/DXIL/DxilModule.cpp",
    "lib/DXIL/DxilModuleHelper.cpp",
    "lib/DXIL/DxilOperations.cpp",
    "lib/DXIL/DxilPDB.cpp",
    "lib/DXIL/DxilResource.cpp",
    "lib/DXIL/DxilResourceBase.cpp",
    "lib/DXIL/DxilResourceBinding.cpp",
    "lib/DXIL/DxilResourceProperties.cpp",
    "lib/DXIL/DxilSampler.cpp",
    "lib/DXIL/DxilSemantic.cpp",
    "lib/DXIL/DxilShaderFlags.cpp",
    "lib/DXIL/DxilShaderModel.cpp",
    "lib/DXIL/DxilSignature.cpp",
    "lib/DXIL/DxilSignatureElement.cpp",
    "lib/DXIL/DxilSubobject.cpp",
    "lib/DXIL/DxilTypeSystem.cpp",
    "lib/DXIL/DxilUtil.cpp",
    "lib/DXIL/DxilUtilDbgInfoAndMisc.cpp",
    # "lib/DebugInfo/DWARF/DWARFAbbreviationDeclaration.cpp",
    # "lib/DebugInfo/DWARF/DWARFAcceleratorTable.cpp",
    # "lib/DebugInfo/DWARF/DWARFCompileUnit.cpp",
    # "lib/DebugInfo/DWARF/DWARFContext.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugAbbrev.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugArangeSet.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugAranges.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugFrame.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugInfoEntry.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugLine.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugLoc.cpp",
    # "lib/DebugInfo/DWARF/DWARFDebugRangeList.cpp",
    # "lib/DebugInfo/DWARF/DWARFFormValue.cpp",
    # "lib/DebugInfo/DWARF/DWARFTypeUnit.cpp",
    # "lib/DebugInfo/DWARF/DWARFUnit.cpp",
    # "lib/DebugInfo/DWARF/SyntaxHighlighting.cpp",
    # "lib/DebugInfo/PDB/DIA/DIADataStream.cpp",
    # "lib/DebugInfo/PDB/DIA/DIAEnumDebugStreams.cpp",
    # "lib/DebugInfo/PDB/DIA/DIAEnumLineNumbers.cpp",
    # "lib/DebugInfo/PDB/DIA/DIAEnumSourceFiles.cpp",
    # "lib/DebugInfo/PDB/DIA/DIAEnumSymbols.cpp",
    # "lib/DebugInfo/PDB/DIA/DIALineNumber.cpp",
    # "lib/DebugInfo/PDB/DIA/DIARawSymbol.cpp",
    # "lib/DebugInfo/PDB/DIA/DIASession.cpp",
    # "lib/DebugInfo/PDB/DIA/DIASourceFile.cpp",
    # "lib/DebugInfo/PDB/IPDBSourceFile.cpp",
    # "lib/DebugInfo/PDB/PDB.cpp",
    # "lib/DebugInfo/PDB/PDBContext.cpp",
    # "lib/DebugInfo/PDB/PDBExtras.cpp",
    # "lib/DebugInfo/PDB/PDBInterfaceAnchors.cpp",
    # "lib/DebugInfo/PDB/PDBSymDumper.cpp",
    # "lib/DebugInfo/PDB/PDBSymbol.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolAnnotation.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolBlock.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolCompiland.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolCompilandDetails.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolCompilandEnv.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolCustom.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolData.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolExe.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolFunc.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolFuncDebugEnd.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolFuncDebugStart.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolLabel.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolPublicSymbol.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolThunk.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeArray.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeBaseClass.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeBuiltin.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeCustom.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeDimension.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeEnum.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeFriend.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeFunctionArg.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeFunctionSig.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeManaged.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypePointer.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeTypedef.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeUDT.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeVTable.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolTypeVTableShape.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolUnknown.cpp",
    # "lib/DebugInfo/PDB/PDBSymbolUsingNamespace.cpp",
    "lib/DxcBindingTable/DxcBindingTable.cpp",
    "lib/DxcSupport/FileIOHelper.cpp",
    "lib/DxcSupport/Global.cpp",
    "lib/DxcSupport/HLSLOptions.cpp",
    "lib/DxcSupport/Unicode.cpp",
    "lib/DxcSupport/WinAdapter.cpp",
    "lib/DxcSupport/WinFunctions.cpp",
    "lib/DxcSupport/dxcapi.use.cpp",
    "lib/DxcSupport/dxcmem.cpp",
    "lib/DxilContainer/DxcContainerBuilder.cpp",
    "lib/DxilContainer/DxilContainer.cpp",
    "lib/DxilContainer/DxilContainerAssembler.cpp",
    "lib/DxilContainer/DxilContainerReader.cpp",
    "lib/DxilContainer/DxilRuntimeReflection.cpp",
    # "lib/DxilDia/DxcPixCompilationInfo.cpp",
    # "lib/DxilDia/DxcPixDxilDebugInfo.cpp",
    # "lib/DxilDia/DxcPixDxilStorage.cpp",
    # "lib/DxilDia/DxcPixEntrypoints.cpp",
    # "lib/DxilDia/DxcPixLiveVariables.cpp",
    # "lib/DxilDia/DxcPixLiveVariables_FragmentIterator.cpp",
    # "lib/DxilDia/DxcPixTypes.cpp",
    # "lib/DxilDia/DxcPixVariables.cpp",
    # "lib/DxilDia/DxilDia.cpp",
    # "lib/DxilDia/DxilDiaDataSource.cpp",
    # "lib/DxilDia/DxilDiaEnumTables.cpp",
    # "lib/DxilDia/DxilDiaSession.cpp",
    # "lib/DxilDia/DxilDiaSymbolManager.cpp",
    # "lib/DxilDia/DxilDiaTable.cpp",
    # "lib/DxilDia/DxilDiaTableFrameData.cpp",
    # "lib/DxilDia/DxilDiaTableInjectedSources.cpp",
    # "lib/DxilDia/DxilDiaTableInputAssemblyFile.cpp",
    # "lib/DxilDia/DxilDiaTableLineNumbers.cpp",
    # "lib/DxilDia/DxilDiaTableSections.cpp",
    # "lib/DxilDia/DxilDiaTableSegmentMap.cpp",
    # "lib/DxilDia/DxilDiaTableSourceFiles.cpp",
    # "lib/DxilDia/DxilDiaTableSymbols.cpp",
    # "lib/DxilPIXPasses/DxilAddPixelHitInstrumentation.cpp",
    # "lib/DxilPIXPasses/DxilAnnotateWithVirtualRegister.cpp",
    # "lib/DxilPIXPasses/DxilDbgValueToDbgDeclare.cpp",
    # "lib/DxilPIXPasses/DxilDebugInstrumentation.cpp",
    # "lib/DxilPIXPasses/DxilForceEarlyZ.cpp",
    # "lib/DxilPIXPasses/DxilOutputColorBecomesConstant.cpp",
    # "lib/DxilPIXPasses/DxilPIXAddTidToAmplificationShaderPayload.cpp",
    # "lib/DxilPIXPasses/DxilPIXMeshShaderOutputInstrumentation.cpp",
    # "lib/DxilPIXPasses/DxilPIXPasses.cpp",
    # "lib/DxilPIXPasses/DxilPIXVirtualRegisters.cpp",
    # "lib/DxilPIXPasses/DxilReduceMSAAToSingleSample.cpp",
    # "lib/DxilPIXPasses/DxilRemoveDiscards.cpp",
    # "lib/DxilPIXPasses/DxilShaderAccessTracking.cpp",
    # "lib/DxilPIXPasses/PixPassHelpers.cpp",
    "lib/DxilRootSignature/DxilRootSignature.cpp",
    "lib/DxilRootSignature/DxilRootSignatureConvert.cpp",
    "lib/DxilRootSignature/DxilRootSignatureSerializer.cpp",
    "lib/DxilRootSignature/DxilRootSignatureValidator.cpp",
    # "lib/DxrFallback/DxrFallbackCompiler.cpp",
    # "lib/DxrFallback/LLVMUtils.cpp",
    # "lib/DxrFallback/LiveValues.cpp",
    # "lib/DxrFallback/Reducibility.cpp",
    # "lib/DxrFallback/StateFunctionTransform.cpp",
    # "lib/DxrFallback/runtime/runtime.c",
    # "lib/ExecutionEngine/ExecutionEngine.cpp",
    # "lib/ExecutionEngine/ExecutionEngineBindings.cpp",
    # "lib/ExecutionEngine/GDBRegistrationListener.cpp",
    # "lib/ExecutionEngine/IntelJITEvents/IntelJITEventListener.cpp",
    # "lib/ExecutionEngine/IntelJITEvents/jitprofiling.c",
    # "lib/ExecutionEngine/Interpreter/Execution.cpp",
    # "lib/ExecutionEngine/Interpreter/ExternalFunctions.cpp",
    # "lib/ExecutionEngine/Interpreter/Interpreter.cpp",
    # "lib/ExecutionEngine/MCJIT/MCJIT.cpp",
    # "lib/ExecutionEngine/OProfileJIT/OProfileJITEventListener.cpp",
    # "lib/ExecutionEngine/OProfileJIT/OProfileWrapper.cpp",
    # "lib/ExecutionEngine/Orc/ExecutionUtils.cpp",
    # "lib/ExecutionEngine/Orc/IndirectionUtils.cpp",
    # "lib/ExecutionEngine/Orc/NullResolver.cpp",
    # "lib/ExecutionEngine/Orc/OrcMCJITReplacement.cpp",
    # "lib/ExecutionEngine/Orc/OrcTargetSupport.cpp",
    # "lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp",
    # "lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp",
    # "lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCOFF.cpp",
    # "lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp",
    # "lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp",
    # "lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.cpp",
    # "lib/ExecutionEngine/SectionMemoryManager.cpp",
    # "lib/ExecutionEngine/TargetSelect.cpp",
    # "lib/Fuzzer/FuzzerCrossOver.cpp",
    # "lib/Fuzzer/FuzzerDriver.cpp",
    # "lib/Fuzzer/FuzzerIO.cpp",
    # "lib/Fuzzer/FuzzerInterface.cpp",
    # "lib/Fuzzer/FuzzerLoop.cpp",
    # "lib/Fuzzer/FuzzerMain.cpp",
    # "lib/Fuzzer/FuzzerMutate.cpp",
    # "lib/Fuzzer/FuzzerSHA1.cpp",
    # "lib/Fuzzer/FuzzerSanitizerOptions.cpp",
    # "lib/Fuzzer/FuzzerTraceState.cpp",
    # "lib/Fuzzer/FuzzerUtil.cpp",
    # "lib/HLSL/ComputeViewIdState.cpp",
    # "lib/HLSL/ComputeViewIdStateBuilder.cpp",
    # "lib/HLSL/ControlDependence.cpp",
    # "lib/HLSL/DxcOptimizer.cpp",
    # "lib/HLSL/DxilCondenseResources.cpp",
    # "lib/HLSL/DxilContainerReflection.cpp",
    # "lib/HLSL/DxilConvergent.cpp",
    # "lib/HLSL/DxilEliminateOutputDynamicIndexing.cpp",
    # "lib/HLSL/DxilExpandTrigIntrinsics.cpp",
    # "lib/HLSL/DxilExportMap.cpp",
    # "lib/HLSL/DxilGenerationPass.cpp",
    # "lib/HLSL/DxilLegalizeEvalOperations.cpp",
    # "lib/HLSL/DxilLegalizeSampleOffsetPass.cpp",
    # "lib/HLSL/DxilLinker.cpp",
    # "lib/HLSL/DxilLoopDeletion.cpp",
    # "lib/HLSL/DxilNoOptLegalize.cpp",
    # "lib/HLSL/DxilNoops.cpp",
    # "lib/HLSL/DxilPackSignatureElement.cpp",
    # "lib/HLSL/DxilPatchShaderRecordBindings.cpp",
    # "lib/HLSL/DxilPrecisePropagatePass.cpp",
    # "lib/HLSL/DxilPreparePasses.cpp",
    # "lib/HLSL/DxilPreserveAllOutputs.cpp",
    # "lib/HLSL/DxilPromoteResourcePasses.cpp",
    # "lib/HLSL/DxilRenameResourcesPass.cpp",
    # "lib/HLSL/DxilSignatureValidation.cpp",
    # "lib/HLSL/DxilSimpleGVNHoist.cpp",
    # "lib/HLSL/DxilTargetLowering.cpp",
    # "lib/HLSL/DxilTargetTransformInfo.cpp",
    # "lib/HLSL/DxilTranslateRawBuffer.cpp",
    # "lib/HLSL/DxilValidation.cpp",
    # "lib/HLSL/HLDeadFunctionElimination.cpp",
    # "lib/HLSL/HLExpandStoreIntrinsics.cpp",
    # "lib/HLSL/HLLegalizeParameter.cpp",
    # "lib/HLSL/HLLowerUDT.cpp",
    # "lib/HLSL/HLMatrixBitcastLowerPass.cpp",
    # "lib/HLSL/HLMatrixLowerPass.cpp",
    # "lib/HLSL/HLMatrixSubscriptUseReplacer.cpp",
    # "lib/HLSL/HLMatrixType.cpp",
    # "lib/HLSL/HLMetadataPasses.cpp",
    # "lib/HLSL/HLModule.cpp",
    # "lib/HLSL/HLOperationLower.cpp",
    # "lib/HLSL/HLOperationLowerExtension.cpp",
    # "lib/HLSL/HLOperations.cpp",
    # "lib/HLSL/HLPreprocess.cpp",
    # "lib/HLSL/HLResource.cpp",
    # "lib/HLSL/HLSignatureLower.cpp",
    # "lib/HLSL/HLUtil.cpp",
    # "lib/HLSL/PauseResumePasses.cpp",
    # "lib/HLSL/WaveSensitivityAnalysis.cpp",
    "lib/IR/AsmWriter.cpp",
    "lib/IR/Attributes.cpp",
    "lib/IR/AutoUpgrade.cpp",
    "lib/IR/BasicBlock.cpp",
    "lib/IR/Comdat.cpp",
    "lib/IR/ConstantFold.cpp",
    "lib/IR/ConstantRange.cpp",
    "lib/IR/Constants.cpp",
    "lib/IR/Core.cpp",
    "lib/IR/DIBuilder.cpp",
    "lib/IR/DataLayout.cpp",
    "lib/IR/DebugInfo.cpp",
    "lib/IR/DebugInfoMetadata.cpp",
    "lib/IR/DebugLoc.cpp",
    "lib/IR/DiagnosticInfo.cpp",
    "lib/IR/DiagnosticPrinter.cpp",
    "lib/IR/Dominators.cpp",
    "lib/IR/Function.cpp",
    "lib/IR/GCOV.cpp",
    "lib/IR/GVMaterializer.cpp",
    "lib/IR/Globals.cpp",
    "lib/IR/IRBuilder.cpp",
    "lib/IR/IRPrintingPasses.cpp",
    "lib/IR/InlineAsm.cpp",
    "lib/IR/Instruction.cpp",
    "lib/IR/Instructions.cpp",
    "lib/IR/IntrinsicInst.cpp",
    "lib/IR/LLVMContext.cpp",
    "lib/IR/LLVMContextImpl.cpp",
    "lib/IR/LegacyPassManager.cpp",
    "lib/IR/MDBuilder.cpp",
    "lib/IR/Mangler.cpp",
    "lib/IR/Metadata.cpp",
    "lib/IR/MetadataTracking.cpp",
    "lib/IR/Module.cpp",
    "lib/IR/Operator.cpp",
    "lib/IR/Pass.cpp",
    "lib/IR/PassManager.cpp",
    "lib/IR/PassRegistry.cpp",
    "lib/IR/Statepoint.cpp",
    "lib/IR/Type.cpp",
    "lib/IR/TypeFinder.cpp",
    "lib/IR/Use.cpp",
    "lib/IR/User.cpp",
    "lib/IR/Value.cpp",
    "lib/IR/ValueSymbolTable.cpp",
    "lib/IR/ValueTypes.cpp",
    "lib/IR/Verifier.cpp",
    "lib/IRReader/IRReader.cpp",
    # "lib/LTO/LTOCodeGenerator.cpp",
    # "lib/LTO/LTOModule.cpp",
    # "lib/Linker/LinkModules.cpp",
    # "lib/MC/ConstantPools.cpp",
    # "lib/MC/ELFObjectWriter.cpp",
    # "lib/MC/MCAsmBackend.cpp",
    # "lib/MC/MCAsmInfo.cpp",
    # "lib/MC/MCAsmInfoCOFF.cpp",
    # "lib/MC/MCAsmInfoDarwin.cpp",
    # "lib/MC/MCAsmInfoELF.cpp",
    # "lib/MC/MCAsmStreamer.cpp",
    # "lib/MC/MCAssembler.cpp",
    # "lib/MC/MCCodeEmitter.cpp",
    # "lib/MC/MCCodeGenInfo.cpp",
    # "lib/MC/MCContext.cpp",
    # "lib/MC/MCDisassembler/Disassembler.cpp",
    # "lib/MC/MCDisassembler/MCDisassembler.cpp",
    # "lib/MC/MCDisassembler/MCExternalSymbolizer.cpp",
    # "lib/MC/MCDisassembler/MCRelocationInfo.cpp",
    # "lib/MC/MCDwarf.cpp",
    # "lib/MC/MCELFObjectTargetWriter.cpp",
    # "lib/MC/MCELFStreamer.cpp",
    # "lib/MC/MCExpr.cpp",
    # "lib/MC/MCInst.cpp",
    # "lib/MC/MCInstPrinter.cpp",
    # "lib/MC/MCInstrAnalysis.cpp",
    # "lib/MC/MCInstrDesc.cpp",
    # "lib/MC/MCLabel.cpp",
    # "lib/MC/MCLinkerOptimizationHint.cpp",
    # "lib/MC/MCMachOStreamer.cpp",
    # "lib/MC/MCMachObjectTargetWriter.cpp",
    # "lib/MC/MCNullStreamer.cpp",
    # "lib/MC/MCObjectFileInfo.cpp",
    # "lib/MC/MCObjectStreamer.cpp",
    # "lib/MC/MCObjectWriter.cpp",
    # "lib/MC/MCParser/AsmLexer.cpp",
    # "lib/MC/MCParser/AsmParser.cpp",
    # "lib/MC/MCParser/COFFAsmParser.cpp",
    # "lib/MC/MCParser/DarwinAsmParser.cpp",
    # "lib/MC/MCParser/ELFAsmParser.cpp",
    # "lib/MC/MCParser/MCAsmLexer.cpp",
    # "lib/MC/MCParser/MCAsmParser.cpp",
    # "lib/MC/MCParser/MCAsmParserExtension.cpp",
    # "lib/MC/MCParser/MCTargetAsmParser.cpp",
    # "lib/MC/MCRegisterInfo.cpp",
    # "lib/MC/MCSchedule.cpp",
    # "lib/MC/MCSection.cpp",
    # "lib/MC/MCSectionCOFF.cpp",
    # "lib/MC/MCSectionELF.cpp",
    # "lib/MC/MCSectionMachO.cpp",
    # "lib/MC/MCStreamer.cpp",
    # "lib/MC/MCSubtargetInfo.cpp",
    # "lib/MC/MCSymbol.cpp",
    # "lib/MC/MCSymbolELF.cpp",
    # "lib/MC/MCSymbolizer.cpp",
    # "lib/MC/MCTargetOptions.cpp",
    # "lib/MC/MCValue.cpp",
    # "lib/MC/MCWin64EH.cpp",
    # "lib/MC/MCWinEH.cpp",
    # "lib/MC/MachObjectWriter.cpp",
    # "lib/MC/StringTableBuilder.cpp",
    # "lib/MC/SubtargetFeature.cpp",
    # "lib/MC/WinCOFFObjectWriter.cpp",
    # "lib/MC/WinCOFFStreamer.cpp",
    # "lib/MC/YAML.cpp",
    # "lib/MSSupport/MSFileSystemImpl.cpp",
    # "lib/Miniz/miniz.c",
    # "lib/Object/Archive.cpp",
    # "lib/Object/ArchiveWriter.cpp",
    # "lib/Object/Binary.cpp",
    # "lib/Object/COFFObjectFile.cpp",
    # "lib/Object/COFFYAML.cpp",
    # "lib/Object/ELF.cpp",
    # "lib/Object/ELFObjectFile.cpp",
    # "lib/Object/ELFYAML.cpp",
    # "lib/Object/Error.cpp",
    # "lib/Object/IRObjectFile.cpp",
    # "lib/Object/MachOObjectFile.cpp",
    # "lib/Object/MachOUniversal.cpp",
    # "lib/Object/Object.cpp",
    # "lib/Object/ObjectFile.cpp",
    # "lib/Object/RecordStreamer.cpp",
    # "lib/Object/SymbolSize.cpp",
    # "lib/Object/SymbolicFile.cpp",
    # "lib/Option/Arg.cpp",
    # "lib/Option/ArgList.cpp",
    # "lib/Option/OptTable.cpp",
    # "lib/Option/Option.cpp",
    # "lib/PassPrinters/PassPrinters.cpp",
    # "lib/Passes/PassBuilder.cpp",
    # "lib/ProfileData/CoverageMapping.cpp",
    # "lib/ProfileData/CoverageMappingReader.cpp",
    # "lib/ProfileData/CoverageMappingWriter.cpp",
    # "lib/ProfileData/InstrProf.cpp",
    # "lib/ProfileData/InstrProfReader.cpp",
    # "lib/ProfileData/InstrProfWriter.cpp",
    # "lib/ProfileData/SampleProf.cpp",
    # "lib/ProfileData/SampleProfReader.cpp",
    # "lib/ProfileData/SampleProfWriter.cpp",
    "lib/Support/APFloat.cpp",
    "lib/Support/APInt.cpp",
    "lib/Support/APSInt.cpp",
    "lib/Support/ARMBuildAttrs.cpp",
    "lib/Support/ARMWinEH.cpp",
    "lib/Support/Allocator.cpp",
    "lib/Support/Atomic.cpp",
    "lib/Support/BlockFrequency.cpp",
    "lib/Support/BranchProbability.cpp",
    "lib/Support/COM.cpp",
    "lib/Support/CommandLine.cpp",
    "lib/Support/Compression.cpp",
    "lib/Support/ConvertUTF.c",
    "lib/Support/ConvertUTFWrapper.cpp",
    "lib/Support/CrashRecoveryContext.cpp",
    "lib/Support/DAGDeltaAlgorithm.cpp",
    "lib/Support/DataExtractor.cpp",
    "lib/Support/DataStream.cpp",
    "lib/Support/Debug.cpp",
    "lib/Support/DeltaAlgorithm.cpp",
    "lib/Support/Dwarf.cpp",
    "lib/Support/DynamicLibrary.cpp",
    "lib/Support/Errno.cpp",
    "lib/Support/ErrorHandling.cpp",
    "lib/Support/FileOutputBuffer.cpp",
    "lib/Support/FileUtilities.cpp",
    "lib/Support/FoldingSet.cpp",
    "lib/Support/FormattedStream.cpp",
    "lib/Support/GraphWriter.cpp",
    "lib/Support/Hashing.cpp",
    "lib/Support/Host.cpp",
    "lib/Support/IntEqClasses.cpp",
    "lib/Support/IntervalMap.cpp",
    "lib/Support/IntrusiveRefCntPtr.cpp",
    "lib/Support/LEB128.cpp",
    "lib/Support/LineIterator.cpp",
    "lib/Support/Locale.cpp",
    "lib/Support/LockFileManager.cpp",
    "lib/Support/MD5.cpp",
    "lib/Support/MSFileSystemBasic.cpp",
    "lib/Support/ManagedStatic.cpp",
    "lib/Support/MathExtras.cpp",
    "lib/Support/Memory.cpp",
    "lib/Support/MemoryBuffer.cpp",
    "lib/Support/MemoryObject.cpp",
    "lib/Support/Mutex.cpp",
    "lib/Support/Options.cpp",
    "lib/Support/Path.cpp",
    # "lib/Support/PluginLoader.cpp", # DXC's version of LLVM has this disabled
    "lib/Support/PrettyStackTrace.cpp",
    "lib/Support/Process.cpp",
    "lib/Support/Program.cpp",
    "lib/Support/RWMutex.cpp",
    "lib/Support/RandomNumberGenerator.cpp",
    "lib/Support/Regex.cpp",
    "lib/Support/ScaledNumber.cpp",
    "lib/Support/SearchForAddressOfSpecialSymbol.cpp",
    "lib/Support/Signals.cpp",
    "lib/Support/SmallPtrSet.cpp",
    "lib/Support/SmallVector.cpp",
    "lib/Support/SourceMgr.cpp",
    "lib/Support/SpecialCaseList.cpp",
    "lib/Support/Statistic.cpp",
    "lib/Support/StreamingMemoryObject.cpp",
    "lib/Support/StringExtras.cpp",
    "lib/Support/StringMap.cpp",
    "lib/Support/StringPool.cpp",
    "lib/Support/StringRef.cpp",
    "lib/Support/StringSaver.cpp",
    "lib/Support/SystemUtils.cpp",
    "lib/Support/TargetParser.cpp",
    "lib/Support/TargetRegistry.cpp",
    "lib/Support/ThreadLocal.cpp",
    "lib/Support/Threading.cpp",
    "lib/Support/TimeValue.cpp",
    "lib/Support/Timer.cpp",
    "lib/Support/ToolOutputFile.cpp",
    "lib/Support/Triple.cpp",
    "lib/Support/Twine.cpp",
    "lib/Support/Unicode.cpp",
    "lib/Support/Valgrind.cpp",
    "lib/Support/Watchdog.cpp",
    "lib/Support/YAMLParser.cpp",
    "lib/Support/YAMLTraits.cpp",
    "lib/Support/assert.cpp",
    "lib/Support/circular_raw_ostream.cpp",
    "lib/Support/raw_os_ostream.cpp",
    "lib/Support/raw_ostream.cpp",
    "lib/Support/regcomp.c",
    "lib/Support/regerror.c",
    "lib/Support/regexec.c",
    "lib/Support/regfree.c",
    "lib/Support/regmalloc.cpp",
    "lib/Support/regstrlcpy.c",
    # "lib/TableGen/Error.cpp",
    # "lib/TableGen/Main.cpp",
    # "lib/TableGen/Record.cpp",
    # "lib/TableGen/SetTheory.cpp",
    # "lib/TableGen/StringMatcher.cpp",
    # "lib/TableGen/TGLexer.cpp",
    # "lib/TableGen/TGParser.cpp",
    # "lib/TableGen/TableGenBackend.cpp",
    # "lib/Target/Target.cpp",
    # "lib/Target/TargetIntrinsicInfo.cpp",
    # "lib/Target/TargetLoweringObjectFile.cpp",
    # "lib/Target/TargetMachine.cpp",
    # "lib/Target/TargetMachineC.cpp",
    # "lib/Target/TargetRecip.cpp",
    # "lib/Target/TargetSubtargetInfo.cpp",
    "lib/Transforms/Hello/Hello.cpp",
    "lib/Transforms/IPO/ArgumentPromotion.cpp",
    "lib/Transforms/IPO/BarrierNoopPass.cpp",
    "lib/Transforms/IPO/ConstantMerge.cpp",
    "lib/Transforms/IPO/DeadArgumentElimination.cpp",
    "lib/Transforms/IPO/ElimAvailExtern.cpp",
    "lib/Transforms/IPO/ExtractGV.cpp",
    "lib/Transforms/IPO/FunctionAttrs.cpp",
    "lib/Transforms/IPO/GlobalDCE.cpp",
    "lib/Transforms/IPO/GlobalOpt.cpp",
    "lib/Transforms/IPO/IPConstantPropagation.cpp",
    "lib/Transforms/IPO/IPO.cpp",
    "lib/Transforms/IPO/InlineAlways.cpp",
    "lib/Transforms/IPO/InlineSimple.cpp",
    "lib/Transforms/IPO/Inliner.cpp",
    "lib/Transforms/IPO/Internalize.cpp",
    "lib/Transforms/IPO/LoopExtractor.cpp",
    "lib/Transforms/IPO/LowerBitSets.cpp",
    "lib/Transforms/IPO/MergeFunctions.cpp",
    "lib/Transforms/IPO/PartialInlining.cpp",
    "lib/Transforms/IPO/PassManagerBuilder.cpp",
    "lib/Transforms/IPO/PruneEH.cpp",
    "lib/Transforms/IPO/StripDeadPrototypes.cpp",
    "lib/Transforms/IPO/StripSymbols.cpp",
    # "lib/Transforms/InstCombine/InstCombineAddSub.cpp",
    # "lib/Transforms/InstCombine/InstCombineAndOrXor.cpp",
    # "lib/Transforms/InstCombine/InstCombineCalls.cpp",
    # "lib/Transforms/InstCombine/InstCombineCasts.cpp",
    # "lib/Transforms/InstCombine/InstCombineCompares.cpp",
    # "lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp",
    # "lib/Transforms/InstCombine/InstCombineMulDivRem.cpp",
    # "lib/Transforms/InstCombine/InstCombinePHI.cpp",
    # "lib/Transforms/InstCombine/InstCombineSelect.cpp",
    # "lib/Transforms/InstCombine/InstCombineShifts.cpp",
    # "lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp",
    # "lib/Transforms/InstCombine/InstCombineVectorOps.cpp",
    # "lib/Transforms/InstCombine/InstructionCombining.cpp",
    # "lib/Transforms/Instrumentation/AddressSanitizer.cpp",
    # "lib/Transforms/Instrumentation/BoundsChecking.cpp",
    # "lib/Transforms/Instrumentation/DataFlowSanitizer.cpp",
    # "lib/Transforms/Instrumentation/GCOVProfiling.cpp",
    # "lib/Transforms/Instrumentation/InstrProfiling.cpp",
    # "lib/Transforms/Instrumentation/Instrumentation.cpp",
    # "lib/Transforms/Instrumentation/SafeStack.cpp",
    # "lib/Transforms/Instrumentation/SanitizerCoverage.cpp",
    # "lib/Transforms/Instrumentation/ThreadSanitizer.cpp",
    # "lib/Transforms/Instrumentation/memorysanitizer.cpp",
    # "lib/Transforms/ObjCARC/ARCInstKind.cpp",
    # "lib/Transforms/ObjCARC/DependencyAnalysis.cpp",
    # "lib/Transforms/ObjCARC/ObjCARC.cpp",
    # "lib/Transforms/ObjCARC/ObjCARCAPElim.cpp",
    # "lib/Transforms/ObjCARC/ObjCARCAliasAnalysis.cpp",
    # "lib/Transforms/ObjCARC/ObjCARCContract.cpp",
    # "lib/Transforms/ObjCARC/ObjCARCExpand.cpp",
    # "lib/Transforms/ObjCARC/ObjCARCOpts.cpp",
    # "lib/Transforms/ObjCARC/ProvenanceAnalysis.cpp",
    # "lib/Transforms/ObjCARC/ProvenanceAnalysisEvaluator.cpp",
    # "lib/Transforms/ObjCARC/PtrState.cpp",
    # "lib/Transforms/Scalar/ADCE.cpp",
    # "lib/Transforms/Scalar/AlignmentFromAssumptions.cpp",
    # "lib/Transforms/Scalar/BDCE.cpp",
    # "lib/Transforms/Scalar/ConstantHoisting.cpp",
    # "lib/Transforms/Scalar/ConstantProp.cpp",
    # "lib/Transforms/Scalar/CorrelatedValuePropagation.cpp",
    # "lib/Transforms/Scalar/DCE.cpp",
    # "lib/Transforms/Scalar/DeadStoreElimination.cpp",
    # "lib/Transforms/Scalar/DxilConditionalMem2Reg.cpp",
    # "lib/Transforms/Scalar/DxilEliminateVector.cpp",
    # "lib/Transforms/Scalar/DxilEraseDeadRegion.cpp",
    # "lib/Transforms/Scalar/DxilFixConstArrayInitializer.cpp",
    # "lib/Transforms/Scalar/DxilLoopUnroll.cpp",
    # "lib/Transforms/Scalar/DxilRemoveDeadBlocks.cpp",
    # "lib/Transforms/Scalar/DxilRemoveUnstructuredLoopExits.cpp",
    # "lib/Transforms/Scalar/EarlyCSE.cpp",
    # "lib/Transforms/Scalar/FlattenCFGPass.cpp",
    # "lib/Transforms/Scalar/Float2Int.cpp",
    # "lib/Transforms/Scalar/GVN.cpp",
    # "lib/Transforms/Scalar/HoistConstantArray.cpp",
    # "lib/Transforms/Scalar/IndVarSimplify.cpp",
    # "lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp",
    # "lib/Transforms/Scalar/JumpThreading.cpp",
    # "lib/Transforms/Scalar/LICM.cpp",
    # "lib/Transforms/Scalar/LoadCombine.cpp",
    # "lib/Transforms/Scalar/LoopDeletion.cpp",
    # "lib/Transforms/Scalar/LoopDistribute.cpp",
    # "lib/Transforms/Scalar/LoopIdiomRecognize.cpp",
    # "lib/Transforms/Scalar/LoopInstSimplify.cpp",
    # "lib/Transforms/Scalar/LoopInterchange.cpp",
    # "lib/Transforms/Scalar/LoopRerollPass.cpp",
    # "lib/Transforms/Scalar/LoopRotation.cpp",
    # "lib/Transforms/Scalar/LoopStrengthReduce.cpp",
    # "lib/Transforms/Scalar/LoopUnrollPass.cpp",
    # "lib/Transforms/Scalar/LoopUnswitch.cpp",
    # "lib/Transforms/Scalar/LowerAtomic.cpp",
    # "lib/Transforms/Scalar/LowerExpectIntrinsic.cpp",
    # "lib/Transforms/Scalar/LowerTypePasses.cpp",
    # "lib/Transforms/Scalar/MemCpyOptimizer.cpp",
    # "lib/Transforms/Scalar/MergedLoadStoreMotion.cpp",
    # "lib/Transforms/Scalar/NaryReassociate.cpp",
    # "lib/Transforms/Scalar/PartiallyInlineLibCalls.cpp",
    # "lib/Transforms/Scalar/PlaceSafepoints.cpp",
    # "lib/Transforms/Scalar/Reassociate.cpp",
    # "lib/Transforms/Scalar/Reg2Mem.cpp",
    # "lib/Transforms/Scalar/Reg2MemHLSL.cpp",
    # "lib/Transforms/Scalar/RewriteStatepointsForGC.cpp",
    # "lib/Transforms/Scalar/SCCP.cpp",
    # "lib/Transforms/Scalar/SROA.cpp",
    # "lib/Transforms/Scalar/SampleProfile.cpp",
    # "lib/Transforms/Scalar/Scalar.cpp",
    # "lib/Transforms/Scalar/ScalarReplAggregates.cpp",
    # "lib/Transforms/Scalar/ScalarReplAggregatesHLSL.cpp",
    # "lib/Transforms/Scalar/Scalarizer.cpp",
    # "lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp",
    # "lib/Transforms/Scalar/SimplifyCFGPass.cpp",
    # "lib/Transforms/Scalar/Sink.cpp",
    # "lib/Transforms/Scalar/SpeculativeExecution.cpp",
    # "lib/Transforms/Scalar/StraightLineStrengthReduce.cpp",
    # "lib/Transforms/Scalar/StructurizeCFG.cpp",
    # "lib/Transforms/Scalar/TailRecursionElimination.cpp",
    "lib/Transforms/Utils/ASanStackFrameLayout.cpp",
    "lib/Transforms/Utils/AddDiscriminators.cpp",
    "lib/Transforms/Utils/BasicBlockUtils.cpp",
    "lib/Transforms/Utils/BreakCriticalEdges.cpp",
    "lib/Transforms/Utils/BuildLibCalls.cpp",
    "lib/Transforms/Utils/BypassSlowDivision.cpp",
    "lib/Transforms/Utils/CloneFunction.cpp",
    "lib/Transforms/Utils/CloneModule.cpp",
    "lib/Transforms/Utils/CmpInstAnalysis.cpp",
    "lib/Transforms/Utils/CodeExtractor.cpp",
    "lib/Transforms/Utils/CtorUtils.cpp",
    "lib/Transforms/Utils/DemoteRegToStack.cpp",
    "lib/Transforms/Utils/FlattenCFG.cpp",
    "lib/Transforms/Utils/GlobalStatus.cpp",
    "lib/Transforms/Utils/InlineFunction.cpp",
    "lib/Transforms/Utils/InstructionNamer.cpp",
    "lib/Transforms/Utils/IntegerDivision.cpp",
    "lib/Transforms/Utils/LCSSA.cpp",
    "lib/Transforms/Utils/Local.cpp",
    "lib/Transforms/Utils/LoopSimplify.cpp",
    "lib/Transforms/Utils/LoopSimplifyId.cpp",
    "lib/Transforms/Utils/LoopUnroll.cpp",
    "lib/Transforms/Utils/LoopUnrollRuntime.cpp",
    "lib/Transforms/Utils/LoopUtils.cpp",
    "lib/Transforms/Utils/LoopVersioning.cpp",
    "lib/Transforms/Utils/LowerInvoke.cpp",
    "lib/Transforms/Utils/LowerSwitch.cpp",
    "lib/Transforms/Utils/Mem2Reg.cpp",
    "lib/Transforms/Utils/MetaRenamer.cpp",
    "lib/Transforms/Utils/ModuleUtils.cpp",
    "lib/Transforms/Utils/PromoteMemoryToRegister.cpp",
    "lib/Transforms/Utils/SSAUpdater.cpp",
    "lib/Transforms/Utils/SimplifyCFG.cpp",
    "lib/Transforms/Utils/SimplifyIndVar.cpp",
    "lib/Transforms/Utils/SimplifyInstructions.cpp",
    "lib/Transforms/Utils/SimplifyLibCalls.cpp",
    "lib/Transforms/Utils/SymbolRewriter.cpp",
    "lib/Transforms/Utils/UnifyFunctionExitNodes.cpp",
    "lib/Transforms/Utils/Utils.cpp",
    "lib/Transforms/Utils/ValueMapper.cpp",
    # "lib/Transforms/Vectorize/BBVectorize.cpp",
    # "lib/Transforms/Vectorize/LoopVectorize.cpp",
    # "lib/Transforms/Vectorize/SLPVectorizer.cpp",
    # "lib/Transforms/Vectorize/Vectorize.cpp",
]
env_thirdparty_dxc.add_source_files(thirdparty_obj, [dxc_dir + v for v in dxc_sources])

env_thirdparty_dxc.Prepend(CPPPATH=["#thirdparty/dxc/include/llvm/llvm_assert"])  # Avoid including a wrong assert.h

env_thirdparty_dxc["CPPDEFINES"] = [
    v for v in env_thirdparty_dxc["CPPDEFINES"] if "MSVC" not in v
]  # MSVC is something else in LLVM; let's not interfere

env_thirdparty_dxc.Append(CCFLAGS=["/wd4146", "/wd4005", "/wd4996", "/wd4722", "/wd4291"])

# env_thirdparty_dxc.Append(CPPDEFINES=["LLVM_ON_WIN32"]) # Not sure why only some files need this...
if not env.msvc:
    env_thirdparty_dxc.Append(CCFLAGS=["-std=cpp++14"])
else:
    env_thirdparty_dxc.Append(CCFLAGS=["/wd4624"])
    env_thirdparty_dxc.Append(CCFLAGS=["/std:c++14"])  # C++11 not available in MSVC


# Add all

env.drivers_sources += thirdparty_obj


# Godot source files

driver_obj = []

env.add_source_files(driver_obj, "*.cpp")
env.drivers_sources += driver_obj

# Needed to force rebuilding the driver files when the thirdparty code is updated.
env.Depends(driver_obj, thirdparty_obj)
